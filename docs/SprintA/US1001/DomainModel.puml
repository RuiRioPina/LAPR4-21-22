@startuml

hide methods
hide fields

package Team <<rectangle>> {






}



package "Team Type" <<Rectangle>>{
    class TeamType << (E,#FFFFFF) >>
    class Team << (E,#FFFFFF) >> <<Root>>


    TeamType <--o Team


}

package Ticket <<Rectangle>>{

    class Ticket << (E,#FFFFFF) >> <<Root>>

    class Feedback << (V,#AAAAAA) >>

    class TicketStatus << (V,#AAAAAA) >>

    class Urgency << (V,#AAAAAA) >>

    class DateOfGeneration << (V,#AAAAAA) >>

    class LimitDate << (V,#AAAAAA) >>



    Ticket -down-> Feedback
    Ticket o--> TicketStatus
    Ticket o--> Urgency

    Ticket --> DateOfGeneration
    Ticket --> LimitDate

    Ticket --> Form


}

package Activity <<rectangle>>{
    class Activity << (E,#FFFFFF) >>
    class ActivityType << (V,#AAAAAA) >>
    class ActivityFlux << (E,#FFFFFF) >> <<Root>>

    Activity o--> ActivityType
    ActivityFlux o--> Activity
    Ticket o--> ActivityFlux

}

package Catalog <<Rectangle>>{

    class Catalog << (E,#FFFFFF) >> <<Root>>

    class SLA << (V,#AAAAAA) >>

    class CatalogCriteria << (E,#FFFFFF) >>

    Catalog --> SLA
    Catalog --> CatalogCriteria
    CatalogCriteria o--> TeamType

}

package Service <<Rectangle>>{
    class Service << (E,#FFFFFF) >> <<Root>>
    class CompletedService << (E,#FFFFFF) >>
    class UncompletedService << (E,#FFFFFF) >>
    class KeyWords << (V,#AAAAAA) >>

    class Approval << (E,#FF9F00) >>

    class Classification << (E,#FF9F00) >>

    class ClassificationInterval << (V,#AAAAAA) >>


    Service --> ActivityFlux

    Approval ..> Service

    Classification ..> Service

    Service --> ClassificationInterval

    Service --> KeyWords

    UncompletedService -|> Service
    CompletedService -left|> Service

    Service --> Form

}

package Form <<Rectangle>>{
    class Form << (E,#FFFFFF) >> <<Root>>

    class SolicitationForm << (E,#FFFFFF) >>

    class ManualActivityForm << (E,#FFFFFF) >>

    class FormAttribute << (E,#FFFFFF) >>

    class AttributeType << (V,#AAAAAA) >>

    class AttributeValue << (V,#AAAAAA) >>

    class Script << (V,#AAAAAA) >>

    Form --> FormAttribute

    SolicitationForm -|> Form

    ManualActivityForm -up|> Form

    Form --> Script

    FormAttribute --> AttributeType

    FormAttribute --> AttributeValue



}

package User <<Rectangle>>{
    class User << (E,#FFFFFF) >> <<Root>>

    class Function << (V,#AAAAAA) >>

    class Administrator << (E,#FFFFFF) >>

    class Collaborator << (E,#FFFFFF) >>

    class Address << (V,#AAAAAA) >>

    class HumanResources << (E,#FFFFFF) >>

    User --> Function

    Administrator --|> User
    Collaborator --|> User
    Collaborator --> Address
    HumanResources --|> User
    Ticket --> Collaborator
    Team --> Collaborator
    Collaborator --> Collaborator





}

/'

Uma nota sobre os value objects, se um conceito foi identificado como value object em princípio
deve ser representado no diagrama pois terá regras de negócio associadas. No entanto, se forem
value objects genéricos, ex., Email, Money, Date, não será necessário representa-los e podem
aparecer apenas como atributos das entidades

https://moodle.isep.ipp.pt/pluginfile.php/96426/mod_resource/content/15/Processo_de_engenharia_de_aplicacoes.pdf

Página 15
'/









@enduml